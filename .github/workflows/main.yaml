name: ci

on: push

env:
  GROUP: senacor
  COMMIT_SHA: ${{ github.sha }}
  REPO: simple-consumer

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - run: npm install

      - name: Unit tests
        run: npm run test:github

  docker:
    needs:
      - test
    runs-on: ubuntu-latest
    env:
      PUSH_DOCKER_IMAGE: true
      DOCKER_NAME: ghcr.io/${{ github.repository }}
      DOCKER_REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v2

      - run: npm install

      - name: Build dist
        run: npm run dist

      - run: ls -al && ls -al dist

      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v1

      - name: "Docker: Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1

      - name: "Docker: Login to Container Registry"
        uses: docker/login-action@v1
        if: env.PUSH_DOCKER_IMAGE == 'true'
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: "Docker: Build and push to Container Registry"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: |
            ${{ env.DOCKER_NAME }}:${{ env.COMMIT_SHA }}
          push: ${{ env.PUSH_DOCKER_IMAGE }}

  deployment:
    runs-on: 'ubuntu-latest'
    needs:
      - docker
    env:
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2

      - name: deploy
        run: |
          curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
          sudo apt-get install apt-transport-https --yes
          echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install -y helm

          aws eks update-kubeconfig \
            --name ${{ secrets.KUBERNETES_CLUSTER_NAME }} \
            --role-arn ${{ secrets.KUBERNETES_CLUSTER_DEPLOY_ROLE }}

          helm upgrade --install --set image.tag=${{ env.COMMIT_SHA }} --namespace ${{ github.repository }} -f values.yaml ${{ github.repository }} deployment/${{ github.repository }}
